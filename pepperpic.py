import discord
from discord.ext import commands
from discord import app_commands
import aiohttp
import asyncio
from typing import Optional

JSONBIN_ID = "68bc589fae596e708fe4d068"
JSONBIN_SECRET = "$2a$10$3IrBbikJjQzeGd6FiaLHmuz8wTK.TXOMJRBkzMpeCAVH4ikeNtNaq"

ALLOWED_CHANNELS = [
    1378018756843933767,
    1375457632394936340,
    1375457683531890688,
    1377502522788417558,
    1378456514955710646,
]

REACTION_OPTIONS = ["1", "2", "3", "11"]

# Punktewertung
POINTS = {
    "1": 1,
    "2": 2,
    "3": 3,
    "11": 5,
}


class PepperPicCog(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.session = aiohttp.ClientSession()

    async def cog_unload(self):
        await self.session.close()

    async def fetch_jsonbin(self):
        url = f"https://api.jsonbin.io/v3/b/{JSONBIN_ID}/latest"
        headers = {"X-Master-Key": JSONBIN_SECRET}
        async with self.session.get(url, headers=headers) as resp:
            data = await resp.json()
            return data.get("record", {})

    @app_commands.command(
        name="pepperpic",
        description="Posts the picture with the most reactions or calculates the winners.",
    )
    @app_commands.describe(
        reaction_type="Choose which reaction type to show (or 'winner' for top 3)",
        post="Whether to post publicly (true) or privately (false). Default: false",
    )
    @app_commands.choices(
        reaction_type=[
            app_commands.Choice(name="1Ô∏è‚É£", value="1"),
            app_commands.Choice(name="2Ô∏è‚É£", value="2"),
            app_commands.Choice(name="3Ô∏è‚É£", value="3"),
            app_commands.Choice(name="11Ô∏è‚É£", value="11"),
            app_commands.Choice(name="üèÜ Winner", value="winner"),
        ]
    )
    async def pepperpic(
        self,
        interaction: discord.Interaction,
        reaction_type: Optional[app_commands.Choice[str]] = None,
        post: Optional[bool] = False,
    ):
        await interaction.response.defer(ephemeral=not post)

        record = await self.fetch_jsonbin()
        if not record:
            await interaction.followup.send(
                "No data found in JSONBin.", ephemeral=not post
            )
            return

        embeds = []

        # -------------------
        # WINNER LOGIK
        # -------------------
        if reaction_type and reaction_type.value == "winner":
            scores = {}
            for msg_id, counts in record.items():
                total_points = sum(
                    counts.get(k, 0) * v for k, v in POINTS.items()
                )
                scores[msg_id] = total_points

            # Top 3 nach Punkten
            top3 = sorted(scores.items(), key=lambda x: x[1], reverse=True)[:3]

            for rank, (msg_id, points) in enumerate(top3, start=1):
                found = False
                for channel_id in ALLOWED_CHANNELS:
                    channel = self.bot.get_channel(channel_id)
                    if not channel:
                        continue
                    try:
                        msg = await channel.fetch_message(int(msg_id))
                        if msg.attachments:
                            user_id = msg.mentions[0].id if msg.mentions else None
                            mention_text = "Unknown User"
                            if user_id:
                                member = interaction.guild.get_member(user_id)
                                if member:
                                    mention_text = f"<@{user_id}> ({member.display_name})"
                                else:
                                    mention_text = f"<@{user_id}>"

                            embed = discord.Embed(
                                title=f"üèÜ Rank {rank} ‚Äî {points} Points",
                                description=f"Generated by {mention_text}\n[Jump to Message]({msg.jump_url})",
                                color=discord.Color.gold() if rank == 1 else discord.Color.blue(),
                            )
                            embed.set_image(url=msg.attachments[0].url)
                            embeds.append(embed)
                            found = True
                            break
                    except (discord.NotFound, discord.Forbidden):
                        continue
                if not found:
                    print(f"Message {msg_id} not found in allowed channels.")

        else:
            # -------------------
            # NORMALE REACTION-LOGIK
            # -------------------
            types_to_post = [reaction_type.value] if reaction_type else REACTION_OPTIONS

            for key in types_to_post:
                max_count = -1
                top_msg_id = None
                for msg_id, counts in record.items():
                    count = counts.get(key, 0)
                    if count > max_count:
                        max_count = count
                        top_msg_id = msg_id

                if not top_msg_id:
                    continue

                found = False
                for channel_id in ALLOWED_CHANNELS:
                    channel = self.bot.get_channel(channel_id)
                    if not channel:
                        continue
                    try:
                        msg = await channel.fetch_message(int(top_msg_id))
                        if msg.attachments:
                            user_id = msg.mentions[0].id if msg.mentions else None
                            mention_text = "Unknown User"
                            if user_id:
                                member = interaction.guild.get_member(user_id)
                                if member:
                                    mention_text = f"<@{user_id}> ({member.display_name})"
                                else:
                                    mention_text = f"<@{user_id}>"

                            embed = discord.Embed(
                                title=f"Top {key} Reaction",
                                description=f"Generated by {mention_text}\n[Jump to Message]({msg.jump_url})",
                            )
                            embed.set_image(url=msg.attachments[0].url)
                            embeds.append(embed)
                            found = True
                            break
                    except (discord.NotFound, discord.Forbidden):
                        continue
                if not found:
                    print(f"Message {top_msg_id} not found in allowed channels.")

        if not embeds:
            await interaction.followup.send(
                "No top pictures could be found.", ephemeral=not post
            )
            return

        # √∂ffentlich ‚Üí einzeln posten
        if post:
            for embed in embeds:
                await interaction.channel.send(embed=embed)
                await asyncio.sleep(0.25)
        else:
            # privat ‚Üí gesammelt in einem Followup
            await interaction.followup.send(embeds=embeds, ephemeral=True)


async def setup(bot):
    await bot.add_cog(PepperPicCog(bot))

import discord
from discord.ext import commands
from discord import app_commands
import aiohttp
import asyncio
from typing import Optional

JSONBIN_ID = "68bc589fae596e708fe4d068"
JSONBIN_SECRET = "$2a$10$3IrBbikJjQzeGd6FiaLHmuz8wTK.TXOMJRBkzMpeCAVH4ikeNtNaq"

ALLOWED_CHANNELS = [
    1378018756843933767,
    1375457632394936340,
    1375457683531890688,
    1377502522788417558,
    1378456514955710646,
]

# Punktewertung
POINTS = {
    "1": 1,
    "2": 2,
    "3": 3,
    "13": 5,
}


class PepperPicCog(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.session = aiohttp.ClientSession()

    async def cog_unload(self):
        await self.session.close()

    async def fetch_jsonbin(self):
        url = f"https://api.jsonbin.io/v3/b/{JSONBIN_ID}/latest"
        headers = {"X-Master-Key": JSONBIN_SECRET}
        async with self.session.get(url, headers=headers) as resp:
            data = await resp.json()
            return data.get("record", {})

    @app_commands.command(
        name="pepperpic",
        description="Calculates the top pictures by points."
    )
    @app_commands.describe(
        top_count="Number of top pictures to display (default 2)",
        post="Whether to post publicly (true) or privately (false). Default: false"
    )
    @app_commands.choices(
        top_count=[
            app_commands.Choice(name="Top 2", value="2"),
            app_commands.Choice(name="Top 5", value="5"),
            app_commands.Choice(name="Top 10", value="10"),
            app_commands.Choice(name="Top 15", value="15"),
        ]
    )
    async def pepperpic(
        self,
        interaction: discord.Interaction,
        top_count: Optional[app_commands.Choice[str]] = None,
        post: Optional[bool] = False
    ):
        await interaction.response.defer(ephemeral=not post)

        record = await self.fetch_jsonbin()
        if not record:
            await interaction.followup.send(
                "No data found in JSONBin.", ephemeral=not post
            )
            return

        embeds = []
        top_n = int(top_count.value) if top_count else 2

        # Punkte berechnen, nur Nachrichten mit >0 Punkten
        scores = {}
        for msg_id, counts in record.items():
            total_points = sum(counts.get(k, 0) * v for k, v in POINTS.items() if counts.get(k, 0) > 0)
            if total_points > 0:
                scores[msg_id] = total_points

        if not scores:
            await interaction.followup.send(
                "No messages with points found.", ephemeral=not post
            )
            return

        top_msgs = sorted(scores.items(), key=lambda x: x[1], reverse=True)[:top_n]

        rank_colors = [discord.Color.gold(), discord.Color.light_grey(), discord.Color.orange()]  # Gold, Silber, Bronze

        for rank, (msg_id, points) in enumerate(top_msgs, start=1):
            found = False
            for channel_id in ALLOWED_CHANNELS:
                channel = self.bot.get_channel(channel_id)
                if not channel:
                    continue
                try:
                    msg = await channel.fetch_message(int(msg_id))
                    if not msg.attachments:
                        continue

                    user_id = msg.mentions[0].id if msg.mentions else None
                    mention_text = "Unknown User"
                    if user_id:
                        member = interaction.guild.get_member(user_id)
                        if member:
                            mention_text = f"<@{user_id}> ({member.display_name})"
                        else:
                            mention_text = f"<@{user_id}>"

                    color = rank_colors[rank - 1] if rank <= 3 else discord.Color.blue()

                    embed = discord.Embed(
                        title=f"🏆 Rank {rank} — {points} Points",
                        description=f"Generated by {mention_text}\n[Jump to Message]({msg.jump_url})",
                        color=color
                    )
                    embed.set_image(url=msg.attachments[0].url)
                    embeds.append(embed)
                    found = True
                    break
                except (discord.NotFound, discord.Forbidden):
                    continue

            if not found:
                print(f"Message {msg_id} not found in allowed channels.")

        if not embeds:
            await interaction.followup.send(
                "No top pictures could be found.", ephemeral=not post
            )
            return

        for embed in embeds:
            await interaction.followup.send(embed=embed, ephemeral=not post)
            await asyncio.sleep(0.25)


async def setup(bot):
    await bot.add_cog(PepperPicCog(bot))

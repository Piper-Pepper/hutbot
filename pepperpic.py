import discord
from discord.ext import commands
from discord import app_commands
import asyncio
from typing import Optional

ALLOWED_CHANNELS = [
    1378018756843933767,
    1375457632394936340,
    1375457683531890688,
    1377502522788417558,
    1378456514955710646,
]
REACTION_POINTS = {
    "1Ô∏è‚É£": 1,
    "2Ô∏è‚É£": 2,
    "3Ô∏è‚É£": 3,
    "<:011:1346549711817146400>": 5,  # Dein Custom Emoji
}

class PepperPicCog(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @app_commands.command(
        name="pepperpic",
        description="Calculates the top pictures by reactions."
    )
    @app_commands.describe(
        top_count="Number of top pictures to display (default 2)",
        post="Whether to post publicly (true) or privately (false). Default: false"
    )
    @app_commands.choices(
        top_count=[
            app_commands.Choice(name="Top 2", value="2"),
            app_commands.Choice(name="Top 5", value="5"),
            app_commands.Choice(name="Top 10", value="10"),
            app_commands.Choice(name="Top 15", value="15"),
        ]
    )
    async def pepperpic(
        self,
        interaction: discord.Interaction,
        top_count: Optional[app_commands.Choice[str]] = None,
        post: Optional[bool] = False
    ):
        await interaction.response.defer(ephemeral=not post)

        top_n = int(top_count.value) if top_count else 2
        message_scores = []

        # Alle erlaubten Channels durchgehen
        for channel_id in ALLOWED_CHANNELS:
            channel = self.bot.get_channel(channel_id)
            if not channel:
                continue

            try:
                # Letzte 100 Nachrichten pro Channel (kann bei Bedarf erh√∂ht werden)
                async for msg in channel.history(limit=100):
                    if not msg.attachments:
                        continue  # nur Nachrichten mit Bildern

                    total_points = 0
                    for reaction in msg.reactions:
                        emoji = str(reaction.emoji)
                        if emoji in REACTION_POINTS:
                            total_points += reaction.count * REACTION_POINTS[emoji]

                    if total_points > 0:
                        message_scores.append((msg, total_points))

            except (discord.Forbidden, discord.NotFound):
                continue

        if not message_scores:
            await interaction.followup.send("No messages with reactions found.", ephemeral=not post)
            return

        # Top N Nachrichten sortieren
        top_msgs = sorted(message_scores, key=lambda x: x[1], reverse=True)[:top_n]

        rank_colors = [discord.Color.gold(), discord.Color.light_grey(), discord.Color.orange()]  # Gold/Silber/Bronze
        embeds = []

        for rank, (msg, points) in enumerate(top_msgs, start=1):
            user_id = msg.mentions[0].id if msg.mentions else None
            mention_text = "Unknown User"
            if user_id:
                member = interaction.guild.get_member(user_id)
                if member:
                    mention_text = f"<@{user_id}> ({member.display_name})"
                else:
                    mention_text = f"<@{user_id}>"

            color = rank_colors[rank - 1] if rank <= 3 else discord.Color.blue()

            embed = discord.Embed(
                title=f"üèÜ Rank {rank} ‚Äî {points} Points",
                description=f"Generated by {mention_text}\n[Jump to Message]({msg.jump_url})",
                color=color
            )
            embed.set_image(url=msg.attachments[0].url)
            embeds.append(embed)

        for embed in embeds:
            await interaction.followup.send(embed=embed, ephemeral=not post)
            await asyncio.sleep(0.25)


async def setup(bot):
    await bot.add_cog(PepperPicCog(bot))

import discord
from discord.ext import commands
from discord import app_commands
import asyncio
from typing import Optional
from datetime import datetime

ALLOWED_CHANNELS = [
    1378018756843933767,
    1375457632394936340,
    1375457683531890688,
    1377502522788417558,
    1378456514955710646,
]

REACTION_POINTS = {
    "1Ô∏è‚É£": 1,
    "2Ô∏è‚É£": 2,
    "3Ô∏è‚É£": 3,
    "<:011:1346549711817146400>": 5,
}

# F√ºr sp√§ter k√∂nnen hier weitere Datumsoptionen erg√§nzt werden
DATE_CHOICES = [
    app_commands.Choice(name="07.09.2025", value="2025-09-07")
]

class PepperPicCog(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @app_commands.command(
        name="pepperpic",
        description="Calculates the top pictures by reactions."
    )
    @app_commands.describe(
        top_count="Number of top pictures to display",
        post="Whether to post publicly (true) or privately (false). Default: false",
        since="Start date for messages"
    )
    @app_commands.choices(
        top_count=[
            app_commands.Choice(name="Top 2", value="2"),
            app_commands.Choice(name="Top 5", value="5"),
            app_commands.Choice(name="Top 10", value="10"),
            app_commands.Choice(name="Top 15", value="15"),
        ],
        since=DATE_CHOICES
    )
    async def pepperpic(
        self,
        interaction: discord.Interaction,
        since: app_commands.Choice[str],  # Pflichtfeld
        top_count: Optional[app_commands.Choice[str]] = None,
        post: Optional[bool] = False
    ):
        await interaction.response.defer(ephemeral=not post)

        top_n = int(top_count.value) if top_count else 2
        message_scores = []

        # Ausgew√§hltes Datum
        since_date = datetime.strptime(since.value, "%Y-%m-%d")
        current_date_str = datetime.utcnow().strftime("%Y-%m-%d")

        for channel_id in ALLOWED_CHANNELS:
            channel = self.bot.get_channel(channel_id)
            if not channel:
                continue

            try:
                async for msg in channel.history(limit=100, after=since_date):
                    if not msg.attachments:
                        continue  # nur Nachrichten mit Bildern

                    total_points = 0
                    for reaction in msg.reactions:
                        # Custom Emoji vs Unicode Emoji korrekt erkennen
                        if isinstance(reaction.emoji, str):
                            emoji_key = reaction.emoji
                        else:
                            emoji_key = f"<:{reaction.emoji.name}:{reaction.emoji.id}>"

                        if emoji_key in REACTION_POINTS:
                            # Dummy-Reaktion abziehen
                            actual_count = max(reaction.count - 1, 0)
                            total_points += actual_count * REACTION_POINTS[emoji_key]

                    if total_points > 0:
                        message_scores.append((msg, total_points))

            except (discord.Forbidden, discord.NotFound):
                continue

        if not message_scores:
            await interaction.followup.send("No messages with reactions found.", ephemeral=not post)
            return

        # Top N sortieren
        top_msgs = sorted(message_scores, key=lambda x: x[1], reverse=True)[:top_n]

        rank_colors = [discord.Color.gold(), discord.Color.light_grey(), discord.Color.orange()]
        embeds = []

        for rank, (msg, points) in enumerate(top_msgs, start=1):
            user_id = msg.mentions[0].id if msg.mentions else None
            mention_text = "Unknown User"
            if user_id:
                member = interaction.guild.get_member(user_id)
                if member:
                    mention_text = f"<@{user_id}> ({member.display_name})"
                else:
                    mention_text = f"<@{user_id}>"

            color = rank_colors[rank - 1] if rank <= 3 else discord.Color.blue()

            embed = discord.Embed(
                title=f"üèÜ Rank {rank} ‚Äî {points} Points",
                description=f"Generated by {mention_text}\n[Jump to Message]({msg.jump_url})",
                color=color
            )
            embed.set_image(url=msg.attachments[0].url)
            embeds.append(embed)

        # Alle Top-N Nachrichten posten
        for embed in embeds:
            await interaction.followup.send(embed=embed, ephemeral=not post)
            await asyncio.sleep(0.25)

        # --- Pings der Top 3 User ---
        top_user_ids = []
        for msg, _ in top_msgs[:3]:
            if msg.mentions:
                user_id = msg.mentions[0].id
                if user_id not in top_user_ids:
                    top_user_ids.append(user_id)

        if top_user_ids:
            ping_text = "Top 3 users: " + " ".join(f"<@{uid}>" for uid in top_user_ids)
            await interaction.followup.send(ping_text, ephemeral=not post)

        # Summary-Embed am Ende
        top_count_display = top_n
        top_period_text = f"{since.value} up to {current_date_str}"
        leader_text = "Unknown"
        if top_msgs:
            leader_msg, _ = top_msgs[0]
            user_id = leader_msg.mentions[0].id if leader_msg.mentions else None
            if user_id:
                member = interaction.guild.get_member(user_id)
                if member:
                    leader_text = f"{member.display_name}"
                else:
                    leader_text = f"<@{user_id}>"

        summary_embed = discord.Embed(
            title=f"üìä Current Top {top_count_display}",
            description=f"This is the current Top {top_count_display} from the time period {top_period_text}.\n\n"
                        f"The current leader of AI-Bot Challenge is {leader_text}.",
            color=discord.Color.green()
        )
        await interaction.followup.send(embed=summary_embed, ephemeral=not post)


async def setup(bot):
    await bot.add_cog(PepperPicCog(bot))

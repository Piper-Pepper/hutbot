import discord
from discord.ext import commands
from discord import app_commands
import asyncio
from typing import Optional

# Kanal-ID f√ºr /hutdick
HUT_CHANNEL_ID = 1348240532299579564

# Die Reaction, die gez√§hlt wird
HUT_REACTION = "‚≠ê"

# Post-Limit Optionen
POST_LIMIT_CHOICES = [
    app_commands.Choice(name="50", value="50"),
    app_commands.Choice(name="100", value="100"),  # Standard
    app_commands.Choice(name="200", value="200"),
]

class HutDickCog(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @app_commands.command(
        name="hutdick",
        description="Calculates the top pictures by ‚≠ê reactions."
    )
    @app_commands.describe(
        top_count="Number of top pictures to display",
        post="Whether to post publicly (true) or privately (false). Default: false",
        limit="Number of posts to search"
    )
    @app_commands.choices(
        top_count=[
            app_commands.Choice(name="Top 3", value="3"),
            app_commands.Choice(name="Top 5", value="5"),
            app_commands.Choice(name="Top 10", value="10"),
        ],
        limit=POST_LIMIT_CHOICES
    )
    async def hutdick(
        self,
        interaction: discord.Interaction,
        limit: app_commands.Choice[str],  # Pflichtfeld
        top_count: Optional[app_commands.Choice[str]] = None,
        post: Optional[bool] = False
    ):
        await interaction.response.defer(ephemeral=not post)

        search_limit = int(limit.value) if limit else 100
        top_n = int(top_count.value) if top_count else 3
        message_scores = []

        channel = self.bot.get_channel(HUT_CHANNEL_ID)
        if not channel:
            await interaction.followup.send("Channel not found.", ephemeral=True)
            return

        try:
            async for msg in channel.history(limit=search_limit):
                if not msg.attachments:
                    continue

                total_points = 0
                for reaction in msg.reactions:
                    emoji_key = reaction.emoji if isinstance(reaction.emoji, str) else f"<:{reaction.emoji.name}:{reaction.emoji.id}>"
                    if emoji_key == HUT_REACTION:
                        actual_count = max(reaction.count - 1, 0)
                        total_points += actual_count

                if total_points > 0:
                    message_scores.append((msg, total_points))

        except (discord.Forbidden, discord.NotFound):
            await interaction.followup.send("Could not read messages in the channel.", ephemeral=True)
            return

        if not message_scores:
            await interaction.followup.send(f"No messages with {HUT_REACTION} reactions found.", ephemeral=not post)
            return

        # Top N sortieren
        top_msgs = sorted(message_scores, key=lambda x: x[1], reverse=True)[:top_n]

        rank_colors = [discord.Color.gold(), discord.Color.light_grey(), discord.Color.orange()]
        embeds = []

        for rank, (msg, points) in enumerate(top_msgs, start=1):
            user_id = msg.mentions[0].id if msg.mentions else None
            mention_text = "Unknown User"
            if user_id:
                member = interaction.guild.get_member(user_id)
                mention_text = f"<@{user_id}> ({member.display_name})" if member else f"<@{user_id}>"

            color = rank_colors[rank - 1] if rank <= 3 else discord.Color.blue()

            embed = discord.Embed(
                title=f"üèÜ Rank {rank} ‚Äî {points} ‚≠ê",
                description=f"Generated by {mention_text}\n[Jump to Message]({msg.jump_url})",
                color=color
            )
            embed.set_image(url=msg.attachments[0].url)
            embeds.append(embed)

        # Alle Top-N Nachrichten posten
        for embed in embeds:
            await interaction.followup.send(embed=embed, ephemeral=not post)
            await asyncio.sleep(0.25)

        # Top 3 User pingen
        top_user_ids = []
        for msg, _ in top_msgs[:3]:
            if msg.mentions:
                user_id = msg.mentions[0].id
                if user_id not in top_user_ids:
                    top_user_ids.append(user_id)

        if top_user_ids:
            ping_text = "Top 3 users: " + " ".join(f"<@{uid}>" for uid in top_user_ids)
            await interaction.followup.send(ping_text, ephemeral=not post)

        # Summary-Embed am Ende
        leader_text = "Unknown"
        if top_msgs:
            leader_msg, _ = top_msgs[0]
            user_id = leader_msg.mentions[0].id if leader_msg.mentions else None
            if user_id:
                member = interaction.guild.get_member(user_id)
                leader_text = f"{member.display_name}" if member else f"<@{user_id}>"

        summary_embed = discord.Embed(
            title=f"üèÜ HUT-DICK TOP {top_n} (Last {search_limit} posts)",
            description=f"üìä Top {top_n} images from the last {search_limit} messages.\n"
                        f"Current leader is: **{leader_text}**",
            color=discord.Color.green()
        )
        await interaction.followup.send(embed=summary_embed, ephemeral=not post)


async def setup(bot):
    await bot.add_cog(HutDickCog(bot))
